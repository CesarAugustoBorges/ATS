/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 16 19:28:31 GMT 2020
 */

package carros;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import carros.Coordinate;
import carros.Veiculo;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import utils.ParDatas;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Veiculo_ESTest extends carros.Veiculo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setClassificacao(1378);
      boolean boolean0 = veiculo1.equals(veiculo0);
      assertEquals(1378, veiculo1.getClassificacao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo0.setAutonomia(1378);
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertEquals(1378, veiculo0.getAutonomia());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo0.setConsumo((-188.20202));
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertEquals((-188.20202), veiculo0.getConsumo(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setPreco((-1152.30060275962));
      boolean boolean0 = veiculo1.equals(veiculo0);
      assertEquals((-1152.30060275962), veiculo1.getPreco(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setVelocidade(66);
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertEquals(66, veiculo1.getVelocidade());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 2, 0, 1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      veiculo0.addDatas(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      boolean boolean0 = veiculo0.verificaAutonomia(0, 0);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertTrue(boolean0);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      boolean boolean0 = veiculo0.verificaAutonomia((-218), 1);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("wjXKiY[nC>Pls", "wjXKiY[nC>Pls", (String) null, 0, 0, (-1.0), (-4188), coordinate0, false, (-4188), list0);
      veiculo1.abastecerVeiculo(0);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals((-1.0), veiculo1.getConsumo(), 0.01);
      assertEquals(0.0, veiculo1.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals((-4188), veiculo1.getAutonomia());
      assertEquals((-4188), veiculo1.getClassificacao());
      assertEquals(0, veiculo0.getAutonomia());
      assertFalse(veiculo1.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo1.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(4425.5912, 684.801326799921);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("", "", "", 0, 0, 4425.5912, 0, coordinate0, false, 4794, linkedList0);
      int int0 = veiculo0.tempoViagemCarroJa(coordinate0);
      assertEquals(4425.5912, veiculo0.getConsumo(), 0.01);
      assertEquals(4794, veiculo0.getClassificacao());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, int0);
      assertEquals(0, veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1.0, (-180.0));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo((String) null, "", "oktLMX%F-8?/7Vh*.X", 2147483645, (-1968.61962538183), (-180.0), (-996), coordinate0, true, (-996), linkedList0);
      Coordinate coordinate1 = new Coordinate(2147483645, 0);
      int int0 = veiculo0.tempoViagemCarroJa(coordinate1);
      assertEquals((-1968.61962538183), veiculo0.getPreco(), 0.01);
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals((-180.0), veiculo0.getConsumo(), 0.01);
      assertEquals("", veiculo0.getMatricula());
      assertEquals(2147483645, veiculo0.getVelocidade());
      assertEquals("oktLMX%F-8?/7Vh*.X", veiculo0.getNIF());
      assertEquals((-240), int0);
      assertEquals((-996), veiculo0.getAutonomia());
      assertEquals((-996), veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-3458.7), 2.0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("Ye&8DKi}t6,{}e{Wh", "", "ec}mzGO(K", 0, 2.0, (-112.0929613602224), 0, coordinate0, true, (-1887), linkedList0);
      int int0 = veiculo0.tempoAteVeiculoPeJa(coordinate0);
      assertEquals(0, int0);
      assertEquals((-112.0929613602224), veiculo0.getConsumo(), 0.01);
      assertEquals(2.0, veiculo0.getPreco(), 0.01);
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals("Ye&8DKi}t6,{}e{Wh", veiculo0.getMarca());
      assertEquals((-1887), veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals("", veiculo0.getMatricula());
      assertEquals("ec}mzGO(K", veiculo0.getNIF());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-2004318069), 3747.6775507);
      Veiculo veiculo0 = new Veiculo();
      int int0 = veiculo0.tempoAteVeiculoPeJa(coordinate0);
      assertEquals((-37), int0);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("/E(a;", "", "/E(a;", 3, 3, (-1556.74), 3, (Coordinate) null, false, (-1), linkedList0);
      int int0 = veiculo0.getVelocidade();
      assertEquals((-1), veiculo0.getClassificacao());
      assertEquals(3.0, veiculo0.getPreco(), 0.01);
      assertEquals((-1556.74), veiculo0.getConsumo(), 0.01);
      assertEquals("", veiculo0.getMatricula());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals("/E(a;", veiculo0.getNIF());
      assertEquals(3, int0);
      assertEquals("/E(a;", veiculo0.getMarca());
      assertEquals(3, veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(4425.5912, 684.801326799921);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("", "", "", 0, 0, 4425.5912, 0, coordinate0, false, 4794, linkedList0);
      veiculo0.setVelocidade((-335));
      int int0 = veiculo0.getVelocidade();
      assertEquals((-335), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0, 1149.267921340931);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("?3UM a/Z[jt+fk-;", "", "7ut(ooomia: ", 0, 0, 0, 0, coordinate0, false, 3, linkedList0);
      double double0 = veiculo0.getPreco();
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals("?3UM a/Z[jt+fk-;", veiculo0.getMarca());
      assertEquals(0.0, double0, 0.01);
      assertEquals("", veiculo0.getMatricula());
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(3, veiculo0.getClassificacao());
      assertEquals("7ut(ooomia: ", veiculo0.getNIF());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("", "", "Posi\u00E7\u00E3o (latitude e longitude): ", 1423, (-649.57258), 0.0, (-1), coordinate0, false, (-1), linkedList0);
      double double0 = veiculo0.getPreco();
      assertEquals(1423, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals("Posi\u00E7\u00E3o (latitude e longitude): ", veiculo0.getNIF());
      assertEquals((-1), veiculo0.getClassificacao());
      assertEquals("", veiculo0.getMatricula());
      assertEquals((-649.57258), double0, 0.01);
      assertEquals((-1), veiculo0.getAutonomia());
      assertEquals("", veiculo0.getMarca());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("-<AxxHf$P%~O}]*V", "Consumo: ", " u]8", 0, 2298.1738283031, 2298.1738283031, 0, (Coordinate) null, false, 0, linkedList0);
      veiculo0.getPosicao();
      assertEquals("-<AxxHf$P%~O}]*V", veiculo0.getMarca());
      assertEquals("Consumo: ", veiculo0.getMatricula());
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(2298.1738283031, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(2298.1738283031, veiculo0.getConsumo(), 0.01);
      assertEquals(" u]8", veiculo0.getNIF());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(2274, 2274);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("NIF do Propriet\u00E1rio: ", "NIF do Propriet\u00E1rio: ", "G>&", 2274, 2274, 1145.0, 2525, coordinate0, true, 2274, linkedList0);
      veiculo0.getPosicao();
      assertEquals("NIF do Propriet\u00E1rio: ", veiculo0.getMatricula());
      assertEquals(2274, veiculo0.getClassificacao());
      assertEquals(2274, veiculo0.getVelocidade());
      assertEquals(2525, veiculo0.getAutonomia());
      assertEquals(1145.0, veiculo0.getConsumo(), 0.01);
      assertEquals("G>&", veiculo0.getNIF());
      assertEquals(2274.0, veiculo0.getPreco(), 0.01);
      assertEquals("NIF do Propriet\u00E1rio: ", veiculo0.getMarca());
      assertTrue(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1790.7858, (-636.6099));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("5hs<", "", "", 0, (-636.6099), 1790.7858, 0, coordinate0, false, 0, linkedList0);
      veiculo0.getPosicao();
      assertEquals(1790.7858, veiculo0.getConsumo(), 0.01);
      assertEquals((-636.6099), veiculo0.getPreco(), 0.01);
      assertEquals("5hs<", veiculo0.getMarca());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals("", veiculo0.getNIF());
      assertEquals("", veiculo0.getMatricula());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1968.61962538183), (-2437));
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("SW", "SW", "SW", (-2437), (-1968.61962538183), 3210.24, (-2437), coordinate0, true, 2471, list0);
      veiculo1.getPosicao();
      assertEquals(3210.24, veiculo1.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(2471, veiculo1.getClassificacao());
      assertTrue(veiculo1.getDisponibilidade());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals((-2437), veiculo1.getAutonomia());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals((-1968.61962538183), veiculo1.getPreco(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals((-2437), veiculo1.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setNIF((String) null);
      veiculo0.getNIF();
      assertEquals(0, veiculo0.getClassificacao());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(2274, 2274);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("NIF do Propriet\u00E1rio: ", "NIF do Propriet\u00E1rio: ", "G>&", 2274, 2274, 1145.0, 2525, coordinate0, true, 2274, linkedList0);
      String string0 = veiculo0.getNIF();
      assertEquals(2525, veiculo0.getAutonomia());
      assertEquals(2274.0, veiculo0.getPreco(), 0.01);
      assertEquals("NIF do Propriet\u00E1rio: ", veiculo0.getMatricula());
      assertEquals("G>&", string0);
      assertEquals(2274, veiculo0.getVelocidade());
      assertEquals(2274, veiculo0.getClassificacao());
      assertEquals("NIF do Propriet\u00E1rio: ", veiculo0.getMarca());
      assertEquals(1145.0, veiculo0.getConsumo(), 0.01);
      assertTrue(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-849), 1920.8);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo((String) null, (String) null, "YCFEiJ`", (-1121), 721.4071784, (-1121), (-849), coordinate0, false, 0, list0);
      Veiculo veiculo2 = new Veiculo(veiculo1);
      String string0 = veiculo2.getMatricula();
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals((-849), veiculo2.getAutonomia());
      assertEquals((-1121.0), veiculo2.getConsumo(), 0.01);
      assertEquals((-1121), veiculo1.getVelocidade());
      assertEquals(721.4071784, veiculo2.getPreco(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals((-1121), veiculo2.getVelocidade());
      assertEquals((-849), veiculo1.getAutonomia());
      assertNull(string0);
      assertEquals(0, veiculo2.getClassificacao());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals((-1121.0), veiculo1.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo2.getDisponibilidade());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setMatricula("carros.Veiculo");
      veiculo0.getMatricula();
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(4351.500268255249, 0.0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo((String) null, (String) null, (String) null, (-1377), (-2365.928276), (-1626.9258168), 0, coordinate0, true, (-1916), linkedList0);
      veiculo0.getMarca();
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals((-2365.928276), veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals((-1626.9258168), veiculo0.getConsumo(), 0.01);
      assertEquals((-1916), veiculo0.getClassificacao());
      assertEquals((-1377), veiculo0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.getMarca();
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("qCAPn^*J|W}IP!", "qCAPn^*J|W}IP!", "", 58, 0.0, 914.428, 58, (Coordinate) null, true, 58, list0);
      Veiculo veiculo2 = new Veiculo(veiculo1);
      boolean boolean0 = veiculo2.getDisponibilidade();
      assertEquals(58, veiculo2.getClassificacao());
      assertTrue(boolean0);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals("", veiculo2.getNIF());
      assertEquals(0.0, veiculo1.getPreco(), 0.01);
      assertEquals(914.428, veiculo2.getConsumo(), 0.01);
      assertEquals(58, veiculo1.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(58, veiculo2.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(58, veiculo2.getAutonomia());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals("qCAPn^*J|W}IP!", veiculo2.getMarca());
      assertEquals(58, veiculo1.getClassificacao());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(58, veiculo1.getVelocidade());
      assertEquals("qCAPn^*J|W}IP!", veiculo2.getMatricula());
      assertEquals(0, veiculo0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1790.7858, (-636.6099));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      ParDatas parDatas0 = new ParDatas();
      linkedList0.addFirst(parDatas0);
      Veiculo veiculo0 = new Veiculo("5hs<", "", "", 0, (-636.6099), 1790.7858, 0, coordinate0, false, 0, linkedList0);
      veiculo0.getDatasAlugueres();
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals("", veiculo0.getNIF());
      assertEquals((-636.6099), veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals("5hs<", veiculo0.getMarca());
      assertEquals(1790.7858, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals("", veiculo0.getMatricula());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      double double0 = veiculo0.getConsumo();
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      
      veiculo0.setConsumo((-1.0));
      double double0 = veiculo0.getConsumo();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo(",EA:cTfwJ", "Data de fim: ", (String) null, 0, 0.0, 0.0, 0, coordinate0, false, 11, list0);
      int int0 = veiculo1.getClassificacao();
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo1.getConsumo(), 0.01);
      assertEquals("Data de fim: ", veiculo1.getMatricula());
      assertEquals(11, int0);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo1.getVelocidade());
      assertEquals(0.0, veiculo1.getPreco(), 0.01);
      assertEquals(",EA:cTfwJ", veiculo1.getMarca());
      assertEquals(0, veiculo1.getAutonomia());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo1.getDisponibilidade());
      assertEquals(0, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(4351.500268255249, 0.0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo((String) null, (String) null, (String) null, (-1377), (-2365.928276), (-1626.9258168), 0, coordinate0, true, (-1916), linkedList0);
      int int0 = veiculo0.getClassificacao();
      assertEquals((-1377), veiculo0.getVelocidade());
      assertEquals((-1626.9258168), veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals((-1916), int0);
      assertEquals((-2365.928276), veiculo0.getPreco(), 0.01);
      assertTrue(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1230.0, 1.0);
      LinkedHashSet<ParDatas> linkedHashSet0 = new LinkedHashSet<ParDatas>();
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>(linkedHashSet0);
      Veiculo veiculo0 = new Veiculo("gPvjU(+CAPP+", "gPvjU(+CAPP+", "\n", 1656, 1656, 1656, 1656, coordinate0, false, 1656, linkedList0);
      int int0 = veiculo0.getAutonomia();
      assertEquals(1656, veiculo0.getVelocidade());
      assertEquals(1656.0, veiculo0.getConsumo(), 0.01);
      assertEquals("gPvjU(+CAPP+", veiculo0.getMatricula());
      assertEquals("gPvjU(+CAPP+", veiculo0.getMarca());
      assertEquals(1656, int0);
      assertEquals(1656, veiculo0.getClassificacao());
      assertEquals(1656.0, veiculo0.getPreco(), 0.01);
      assertEquals("\n", veiculo0.getNIF());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 1.0);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("utils.ParDatas", "", "", 0, 0.0, 0, (-1826), coordinate0, false, 578, list0);
      Veiculo veiculo2 = new Veiculo(veiculo1);
      int int0 = veiculo2.getAutonomia();
      assertTrue(veiculo1.equals((Object)veiculo2));
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals("", veiculo2.getMatricula());
      assertEquals(0, veiculo2.getVelocidade());
      assertFalse(veiculo2.getDisponibilidade());
      assertEquals("utils.ParDatas", veiculo2.getMarca());
      assertEquals(0.0, veiculo2.getPreco(), 0.01);
      assertEquals(0.0, veiculo2.getConsumo(), 0.01);
      assertEquals("", veiculo2.getNIF());
      assertEquals(578, veiculo1.getClassificacao());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals((-1826), veiculo1.getAutonomia());
      assertEquals((-1826), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setPreco(333.22);
      double double0 = veiculo0.custoViagem(60.0);
      assertEquals(333.22, veiculo0.getPreco(), 0.01);
      assertEquals(19993.2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setPreco(239.0827753043);
      double double0 = veiculo0.custoViagem((-254.915449));
      assertEquals(239.0827753043, veiculo0.getPreco(), 0.01);
      assertEquals((-60945.893014861744), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(4.0, (-2771.659993503321));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("/2U`uOW/Ja", "aPb4mewk2ty98>%!K|~", (String) null, 1744, 1744, 2.0, 0, coordinate0, false, 2658, linkedList0);
      Veiculo veiculo1 = veiculo0.clone();
      assertEquals(2.0, veiculo1.getConsumo(), 0.01);
      assertFalse(veiculo1.getDisponibilidade());
      assertEquals(1744, veiculo1.getVelocidade());
      assertEquals(2658, veiculo0.getClassificacao());
      assertEquals(1744.0, veiculo1.getPreco(), 0.01);
      assertNotSame(veiculo1, veiculo0);
      assertEquals("aPb4mewk2ty98>%!K|~", veiculo1.getMatricula());
      assertEquals(0, veiculo1.getAutonomia());
      assertEquals("/2U`uOW/Ja", veiculo1.getMarca());
      assertEquals(2.0, veiculo0.getConsumo(), 0.01);
      assertEquals(1744, veiculo0.getVelocidade());
      assertEquals(1744.0, veiculo0.getPreco(), 0.01);
      assertEquals(2658, veiculo1.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0, 1149.267921340931);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("?3UM a/Z[jt+fk-;", "", "7ut(ooomia: ", 0, 0, 0, 0, coordinate0, false, 3, linkedList0);
      veiculo0.setVelocidade((-1107));
      veiculo0.clone();
      assertEquals((-1107), veiculo0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-3458.7), 2.0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("Ye&8DKi}t6,{}e{Wh", "", "ec}mzGO(K", 0, 2.0, (-112.0929613602224), 0, coordinate0, true, (-1887), linkedList0);
      Veiculo veiculo1 = veiculo0.clone();
      assertEquals(0, veiculo1.getAutonomia());
      assertEquals((-112.0929613602224), veiculo0.getConsumo(), 0.01);
      assertEquals(2.0, veiculo0.getPreco(), 0.01);
      assertNotSame(veiculo1, veiculo0);
      assertEquals(0, veiculo1.getVelocidade());
      assertEquals((-1887), veiculo0.getClassificacao());
      assertEquals("", veiculo1.getMatricula());
      assertTrue(veiculo1.getDisponibilidade());
      assertEquals(2.0, veiculo1.getPreco(), 0.01);
      assertEquals((-112.0929613602224), veiculo1.getConsumo(), 0.01);
      assertEquals("Ye&8DKi}t6,{}e{Wh", veiculo1.getMarca());
      assertEquals((-1887), veiculo1.getClassificacao());
      assertEquals("ec}mzGO(K", veiculo1.getNIF());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1790.7858, (-636.6099));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("5hs<", "", "", 0, (-636.6099), 1790.7858, 0, coordinate0, false, 0, linkedList0);
      Veiculo veiculo1 = veiculo0.clone();
      assertEquals("", veiculo1.getMatricula());
      assertEquals(1790.7858, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo1.getClassificacao());
      assertEquals((-636.6099), veiculo0.getPreco(), 0.01);
      assertEquals(1790.7858, veiculo1.getConsumo(), 0.01);
      assertFalse(veiculo1.getDisponibilidade());
      assertEquals((-636.6099), veiculo1.getPreco(), 0.01);
      assertEquals("", veiculo1.getNIF());
      assertEquals(0, veiculo1.getVelocidade());
      assertEquals(0, veiculo1.getAutonomia());
      assertEquals("5hs<", veiculo1.getMarca());
      assertNotSame(veiculo1, veiculo0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setAutonomia(1378);
      veiculo0.clone();
      assertEquals(1378, veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("wjXKiY[nC>Pls", "wjXKiY[nC>Pls", (String) null, 0, 0, (-1.0), (-4188), coordinate0, false, (-4188), list0);
      Veiculo veiculo2 = veiculo1.clone();
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals((-4188), veiculo1.getClassificacao());
      assertEquals((-1.0), veiculo1.getConsumo(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo1.getPreco(), 0.01);
      assertEquals((-4188), veiculo2.getAutonomia());
      assertFalse(veiculo2.getDisponibilidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals((-4188), veiculo2.getClassificacao());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertNotSame(veiculo2, veiculo1);
      assertEquals(0, veiculo2.getVelocidade());
      assertEquals((-1.0), veiculo2.getConsumo(), 0.01);
      assertEquals((-4188), veiculo1.getAutonomia());
      assertEquals(0, veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo(",)IY41", ",)IY41", ".H-Fmk(:#USZ*_", 328, 328, (-3743.478517145164), 328, (Coordinate) null, false, 1378, list0);
      // Undeclared exception!
      try { 
        veiculo1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("carros.Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      // Undeclared exception!
      try { 
        veiculo0.tempoViagemCarroJa((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("carros.Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      // Undeclared exception!
      try { 
        veiculo0.tempoViagemCarro((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("carros.Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://api.openweathermap.org/data/2.5/weather?lat=-300.0&lon=0.0&appid=28c4efcbaf88fde7e5ae89d0b8f05dcd");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "\n");
      Coordinate coordinate0 = new Coordinate((-300.0), 0.0);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("_", "_", "", (-2443), (-2443), (-2443), 0, coordinate0, true, (-2443), list0);
      // Undeclared exception!
      try { 
        veiculo1.tempoViagemCarro(coordinate0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/gson/Gson
         //
         verifyException("utils.Weather", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      // Undeclared exception!
      try { 
        veiculo0.tempoAteVeiculoPeJa((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("carros.Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      // Undeclared exception!
      try { 
        veiculo0.tempoAteVeiculoPe((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("carros.Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://api.openweathermap.org/data/2.5/weather?lat=0.0&lon=0.0&appid=28c4efcbaf88fde7e5ae89d0b8f05dcd");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "RIWAO]`vHd|kS");
      Coordinate coordinate0 = new Coordinate((-3268.705), 1.0);
      // Undeclared exception!
      try { 
        veiculo0.tempoAteVeiculoPe(coordinate0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/gson/Gson
         //
         verifyException("utils.Weather", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      // Undeclared exception!
      try { 
        veiculo0.setDatasAlugueres((List<ParDatas>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("carros.Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, (-687.369));
      Veiculo veiculo0 = null;
      try {
        veiculo0 = new Veiculo("", "\n", "", 0, (-1.0), 0.0, 818, coordinate0, true, 0, (List<ParDatas>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("carros.Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Veiculo veiculo0 = null;
      try {
        veiculo0 = new Veiculo((Veiculo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("carros.Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0, 1149.267921340931);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("?3UM a/Z[jt+fk-;", "", "7ut(ooomia: ", 0, 0, 0, 0, coordinate0, false, 3, linkedList0);
      String string0 = veiculo0.getMarca();
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals("", veiculo0.getMatricula());
      assertEquals("?3UM a/Z[jt+fk-;", string0);
      assertEquals("7ut(ooomia: ", veiculo0.getNIF());
      assertEquals(3, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      int int0 = veiculo0.getAutonomia();
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, int0);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      boolean boolean0 = veiculo0.getDisponibilidade();
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(boolean0);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.getMatricula();
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1), 0.0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("I8.UQOf=!rO", "I8.UQOf=!rO", "?vd_R0g.Uj", (-1), 2146.1172, 2146.1172, (-1), coordinate0, true, (-1685), linkedList0);
      double double0 = veiculo0.getPreco();
      assertEquals((-1), veiculo0.getAutonomia());
      assertEquals("?vd_R0g.Uj", veiculo0.getNIF());
      assertEquals((-1685), veiculo0.getClassificacao());
      assertEquals((-1), veiculo0.getVelocidade());
      assertEquals(2146.1172, veiculo0.getConsumo(), 0.01);
      assertEquals(2146.1172, double0, 0.01);
      assertEquals("I8.UQOf=!rO", veiculo0.getMatricula());
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals("I8.UQOf=!rO", veiculo0.getMarca());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(4425.5912, 684.801326799921);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("", "", "", 0, 0, 4425.5912, 0, coordinate0, false, 4794, linkedList0);
      double double0 = veiculo0.getConsumo();
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(4425.5912, double0, 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(4794, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1790.7858, (-636.6099));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("5hs<", "", "", 0, (-636.6099), 1790.7858, 0, coordinate0, false, 0, linkedList0);
      String string0 = veiculo0.getNIF();
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals("", string0);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(1790.7858, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals((-636.6099), veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals("5hs<", veiculo0.getMarca());
      assertEquals("", veiculo0.getMatricula());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1790.7858, (-636.6099));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("5hs<", "", "", 0, (-636.6099), 1790.7858, 0, coordinate0, false, 0, linkedList0);
      int int0 = veiculo0.getClassificacao();
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals((-636.6099), veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals("", veiculo0.getNIF());
      assertEquals("", veiculo0.getMatricula());
      assertEquals("5hs<", veiculo0.getMarca());
      assertEquals(0, int0);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(1790.7858, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = veiculo0.getPosicao();
      assertEquals(0, veiculo0.getClassificacao());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      int int0 = veiculo0.getVelocidade();
      assertEquals(0, int0);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setClassificacao(1378);
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertEquals(1378, veiculo1.getClassificacao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo();
      veiculo1.setDisponibilidade(true);
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertFalse(boolean0);
      assertTrue(veiculo1.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      assertTrue(veiculo1.equals((Object)veiculo0));
      
      Coordinate coordinate0 = new Coordinate(1378, 1378);
      veiculo1.setPosicao(coordinate0);
      boolean boolean0 = veiculo1.equals(veiculo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setAutonomia(2145244353);
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertEquals(2145244353, veiculo1.getAutonomia());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo0.setConsumo((-1968.61962538183));
      Veiculo veiculo2 = veiculo1.clone();
      boolean boolean0 = veiculo2.equals(veiculo0);
      assertEquals((-1968.61962538183), veiculo0.getConsumo(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertFalse(veiculo1.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo1.getVelocidade());
      assertEquals(0, veiculo1.getClassificacao());
      assertTrue(boolean0);
      assertEquals(0, veiculo1.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setVelocidade((-1397));
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertEquals((-1397), veiculo1.getVelocidade());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      assertTrue(veiculo1.equals((Object)veiculo0));
      
      veiculo1.setNIF("958");
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      assertTrue(veiculo1.equals((Object)veiculo0));
      
      veiculo0.setMatricula("deg");
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertFalse(veiculo1.equals((Object)veiculo0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = veiculo0.clone();
      assertTrue(veiculo1.equals((Object)veiculo0));
      
      veiculo1.setMarca("L");
      Veiculo veiculo2 = veiculo1.clone();
      boolean boolean0 = veiculo2.equals(veiculo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 2326, 0, 0, (-955), 1230);
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      boolean boolean0 = veiculo0.equals(parDatas0);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(boolean0);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      boolean boolean0 = veiculo0.equals((Object) null);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertFalse(boolean0);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      boolean boolean0 = veiculo0.equals(veiculo0);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(4.0, (-2771.659993503321));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("/2U`uOW/Ja", "aPb4mewk2ty98>%!K|~", (String) null, 1744, 1744, 2.0, 0, coordinate0, false, 2658, linkedList0);
      veiculo0.hashCode();
      assertEquals("aPb4mewk2ty98>%!K|~", veiculo0.getMatricula());
      assertEquals(1744.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(2658, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals("/2U`uOW/Ja", veiculo0.getMarca());
      assertEquals(1744, veiculo0.getVelocidade());
      assertEquals(2.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-180.0), (-180.0));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo((String) null, (String) null, "oktLMX%F-8?/7Vh*.X", 2147483645, (-1968.61962538183), (-180.0), (-996), coordinate0, true, (-996), linkedList0);
      veiculo0.hashCode();
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals((-996), veiculo0.getClassificacao());
      assertEquals((-180.0), veiculo0.getConsumo(), 0.01);
      assertEquals(2147483645, veiculo0.getVelocidade());
      assertEquals((-1968.61962538183), veiculo0.getPreco(), 0.01);
      assertEquals((-996), veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0, 1149.267921340931);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("?3UM a/Z[jt+fk-;", "", "7ut(ooomia: ", 0, 0, 0, 0, coordinate0, false, 3, linkedList0);
      boolean boolean0 = veiculo0.verificaAutonomia(0, (-910));
      assertEquals("7ut(ooomia: ", veiculo0.getNIF());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals("", veiculo0.getMatricula());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals("?3UM a/Z[jt+fk-;", veiculo0.getMarca());
      assertEquals(3, veiculo0.getClassificacao());
      assertFalse(boolean0);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      boolean boolean0 = veiculo0.verificaAutonomia(958, 958);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getAutonomia());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      // Undeclared exception!
      try { 
        veiculo0.abastecerVeiculo(0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Division undefined
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = new Coordinate(2.0, 1.0);
      int int0 = veiculo0.tempoViagemCarro(coordinate0);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, int0);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      veiculo0.setDatasAlugueres(list0);
      assertEquals(0, veiculo0.getClassificacao());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      String string0 = veiculo0.toString();
      assertEquals("*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setMarca((String) null);
      Veiculo veiculo1 = veiculo0.clone();
      // Undeclared exception!
      try { 
        veiculo1.equals(veiculo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = new Coordinate((-3112.2916363435365), (-2341.65));
      int int0 = veiculo0.tempoAteVeiculoPe(coordinate0);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, int0);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = new Coordinate(2.0, 1.0);
      int int0 = veiculo0.tempoAteVeiculoPeJa(coordinate0);
      assertEquals(0, veiculo0.getClassificacao());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(26, int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = new Coordinate(2.0, 1.0);
      int int0 = veiculo0.tempoViagemCarroJa(coordinate0);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(104, int0);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      double double0 = veiculo0.custoViagem(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo0.setPreco(958);
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertEquals(958.0, veiculo0.getPreco(), 0.01);
      assertFalse(boolean0);
  }
}
