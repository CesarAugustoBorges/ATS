/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 16 19:34:24 GMT 2020
 */

package carros;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import carros.Coordinate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Coordinate_ESTest extends Coordinate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-2359.98), (-2359.98));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      boolean boolean0 = coordinate1.equals(coordinate0);
      assertEquals((-2359.98), coordinate1.getLongitude(), 0.01);
      assertTrue(boolean0);
      assertEquals((-2359.98), coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Coordinate coordinate1 = new Coordinate(0.0, (-1.0));
      int int0 = coordinate0.compareTo(coordinate1);
      assertEquals((-1.0), coordinate1.getLongitude(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.0, coordinate1.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      double double0 = coordinate0.getLongitude();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1.0, 1.0);
      double double0 = coordinate0.getLongitude();
      assertEquals(1.0, coordinate0.getLatitude(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(432.15568554, 432.15568554);
      double double0 = coordinate0.getLatitude();
      assertEquals(432.15568554, coordinate0.getLongitude(), 0.01);
      assertEquals(432.15568554, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-859.0), (-859.0));
      double double0 = coordinate0.getLatitude();
      assertEquals((-859.0), double0, 0.01);
      assertEquals((-859.0), coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      coordinate0.setLatitude(1.0);
      double double0 = coordinate0.getDistancia(coordinate1);
      assertEquals(1.0, coordinate0.getLatitude(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(305.6933544, 305.6933544);
      Coordinate coordinate1 = coordinate0.clone();
      assertNotSame(coordinate1, coordinate0);
      assertEquals(305.6933544, coordinate1.getLongitude(), 0.01);
      assertEquals(305.6933544, coordinate1.getLatitude(), 0.01);
      assertTrue(coordinate1.equals((Object)coordinate0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1638.27584576), (-1638.27584576));
      Coordinate coordinate1 = coordinate0.clone();
      assertTrue(coordinate1.equals((Object)coordinate0));
      assertEquals((-1638.27584576), coordinate1.getLongitude(), 0.01);
      assertEquals((-1638.27584576), coordinate0.getLatitude(), 0.01);
      assertNotSame(coordinate1, coordinate0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-2812.963), (-2812.963));
      // Undeclared exception!
      try { 
        coordinate0.getDistancia((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("carros.Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-583.352), (-583.352));
      // Undeclared exception!
      try { 
        coordinate0.compareTo((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("carros.Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coordinate coordinate0 = null;
      try {
        coordinate0 = new Coordinate((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("carros.Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      double double0 = coordinate0.getLatitude();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      String string0 = coordinate0.getLatitudeAsString();
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, (-1534.881341));
      String string0 = coordinate0.getLongitudeAsString();
      assertEquals("-1534.881341", string0);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, (-1534.881341));
      double double0 = coordinate0.getLongitude();
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals((-1534.881341), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      double double0 = coordinate0.getDistancia(coordinate0);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      boolean boolean0 = coordinate0.equals("0");
      assertFalse(boolean0);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-2359.98), (-2359.98));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      coordinate0.setLatitude(0.0);
      int int0 = coordinate1.compareTo(coordinate0);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      coordinate0.setLongitude(0.0);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      // Undeclared exception!
      try { 
        coordinate0.setLongitude(12756.274);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter did not pass validation as defined by the CoordinateManager class
         //
         verifyException("carros.Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-2359.98), (-2359.98));
      // Undeclared exception!
      try { 
        coordinate0.setLatitude((-2359.98));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter did not pass validation as defined by the CoordinateManager class
         //
         verifyException("carros.Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      coordinate0.hashCode();
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Coordinate coordinate1 = coordinate0.clone();
      assertNotSame(coordinate1, coordinate0);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-2359.98), (-2359.98));
      String string0 = coordinate0.toString();
      assertEquals("-2359.98, -2359.98", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-2359.98), (-2359.98));
      int int0 = coordinate0.compareTo(coordinate0);
      assertEquals(0, int0);
      assertEquals((-2359.98), coordinate0.getLatitude(), 0.01);
      assertEquals((-2359.98), coordinate0.getLongitude(), 0.01);
  }
}
