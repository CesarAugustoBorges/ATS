/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 16 19:46:23 GMT 2020
 */

package carros;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import carros.Aluguer;
import carros.Coordinate;
import java.util.GregorianCalendar;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Aluguer_ESTest extends carros.Aluguer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = aluguer0.clone();
      aluguer0.setEstadoClassificacao((-2034458190));
      aluguer0.equals(aluguer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.setCustoViagem((-1615.7304226195074));
      aluguer1.equals(aluguer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2340), (-2340), 0, 31, 1809);
      Coordinate coordinate0 = new Coordinate(1.0, 0);
      Aluguer aluguer0 = new Aluguer("##.######", "5f8i(aEM16,M", mockGregorianCalendar0, mockGregorianCalendar0, 1.0, 0, (-1324), coordinate0, 1874.321986656, true, true, true, true, 31);
      aluguer0.hashCode();
      assertTrue(aluguer0.getListaEspera());
      assertEquals((-1324), aluguer0.getTempoViagem());
      assertEquals(1874.321986656, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getAceite());
      assertEquals(31, aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate(874, 1134.3241);
      Aluguer aluguer0 = new Aluguer("", "", mockGregorianCalendar0, mockGregorianCalendar0, 966.308590920287, 1, 874, coordinate0, 0.0, false, false, false, false, (-27));
      int int0 = aluguer0.getTempoViagem();
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals(1, aluguer0.getTempoAteVeiculo());
      assertEquals(874, int0);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(966.308590920287, aluguer0.getCustoViagem(), 0.01);
      assertEquals((-27), aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-2195), 3039.93);
      Aluguer aluguer0 = new Aluguer("`@F!\rnwI^#Ry#v<K$", (String) null, (GregorianCalendar) null, (GregorianCalendar) null, (-2999.5031024), 628, (-2195), coordinate0, 2.0, true, false, true, true, 628);
      int int0 = aluguer0.getTempoViagem();
      assertTrue(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertTrue(aluguer0.getRealizado());
      assertEquals(628, aluguer0.getEstadoClassificacao());
      assertEquals((-2999.5031024), aluguer0.getCustoViagem(), 0.01);
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(2.0, aluguer0.getDistancia(), 0.01);
      assertEquals((-2195), int0);
      assertEquals(628, aluguer0.getTempoAteVeiculo());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      int int0 = aluguer0.getTempoAteVeiculo();
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, int0);
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-2829), (-2829), (-5617), 0);
      Coordinate coordinate0 = new Coordinate((-1.0), (-1413.187095807));
      Aluguer aluguer0 = new Aluguer("R", "R", mockGregorianCalendar0, mockGregorianCalendar0, (-5617), (-70), 1140, coordinate0, (-1413.187095807), false, false, false, false, (-5617));
      int int0 = aluguer0.getTempoAteVeiculo();
      assertEquals((-70), int0);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(1140, aluguer0.getTempoViagem());
      assertEquals((-5617), aluguer0.getEstadoClassificacao());
      assertEquals((-1413.187095807), aluguer0.getDistancia(), 0.01);
      assertEquals((-5617.0), aluguer0.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3196), 0, (-1), (-3196), (-3196));
      Coordinate coordinate0 = new Coordinate(1044, (-1298.83365));
      Aluguer aluguer0 = new Aluguer("\n", (String) null, mockGregorianCalendar0, mockGregorianCalendar0, (-1), 1044, 0, coordinate0, (-1555.0146), true, true, true, true, 1044);
      boolean boolean0 = aluguer0.getRealizado();
      assertTrue(aluguer0.getAceite());
      assertEquals((-1555.0146), aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(1044, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getListaEspera());
      assertEquals((-1.0), aluguer0.getCustoViagem(), 0.01);
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(1044, aluguer0.getTempoAteVeiculo());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3196), 0, (-1), (-3196), (-3196));
      Coordinate coordinate0 = new Coordinate(1044, (-1298.83365));
      Aluguer aluguer0 = new Aluguer("\n", (String) null, mockGregorianCalendar0, mockGregorianCalendar0, (-1), 1044, 0, coordinate0, (-1555.0146), true, true, true, true, 1044);
      String string0 = aluguer0.getMatricula();
      assertTrue(aluguer0.getListaEspera());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getRealizado());
      assertEquals(1044, aluguer0.getEstadoClassificacao());
      assertEquals((-1555.0146), aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getAceite());
      assertEquals((-1.0), aluguer0.getCustoViagem(), 0.01);
      assertEquals(1044, aluguer0.getTempoAteVeiculo());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Aluguer aluguer0 = new Aluguer("Custo da Viagem: ", "G6XczWA=2#1j)G*@", mockGregorianCalendar0, mockGregorianCalendar0, 1807.809786, 0, 0, coordinate0, 0.0, true, true, true, true, (-5084));
      String string0 = aluguer0.getMatricula();
      assertEquals("G6XczWA=2#1j)G*@", string0);
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(1807.809786, aluguer0.getCustoViagem(), 0.01);
      assertEquals((-5084), aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getRealizado());
      assertTrue(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("Custo da Viagem: ", aluguer0.getEmail());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setEstadoClassificacao(3);
      int int0 = aluguer0.getEstadoClassificacao();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setEstadoClassificacao((-1));
      int int0 = aluguer0.getEstadoClassificacao();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 0, 0, (-1), 1107);
      Coordinate coordinate0 = new Coordinate((-868), 0);
      Aluguer aluguer0 = new Aluguer("##.######", "x}%$L}aR#iEf", mockGregorianCalendar0, mockGregorianCalendar0, 0, 0, (-868), coordinate0, 1.0, true, true, false, false, (-1088));
      String string0 = aluguer0.getEmail();
      assertEquals(1.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getListaEspera());
      assertEquals((-868), aluguer0.getTempoViagem());
      assertTrue(aluguer0.getAceite());
      assertEquals("##.######", string0);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("x}%$L}aR#iEf", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals((-1088), aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.getEmail();
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate((-1948.59), (-644.7602208));
      Aluguer aluguer0 = new Aluguer("+Gn[m.C&Vm} SyK]<", ", ", mockGregorianCalendar0, mockGregorianCalendar0, 0.0, 1440, (-1719), coordinate0, 1440, true, true, true, true, 477);
      double double0 = aluguer0.getDistancia();
      assertEquals(1440.0, double0, 0.01);
      assertTrue(aluguer0.getAlteraPreco());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(", ", aluguer0.getMatricula());
      assertTrue(aluguer0.getRealizado());
      assertTrue(aluguer0.getAceite());
      assertEquals("+Gn[m.C&Vm} SyK]<", aluguer0.getEmail());
      assertEquals(1440, aluguer0.getTempoAteVeiculo());
      assertEquals(477, aluguer0.getEstadoClassificacao());
      assertEquals((-1719), aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer((String) null, (String) null, (GregorianCalendar) null, (GregorianCalendar) null, (-1456.0), 0, 0, (Coordinate) null, (-1245.707106), true, false, false, true, 3);
      double double0 = aluguer0.getDistancia();
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals((-1245.707106), double0, 0.01);
      assertEquals((-1456.0), aluguer0.getCustoViagem(), 0.01);
      assertEquals(3, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Coordinate coordinate0 = aluguer0.getDestino();
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Custo da Viagem: ");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Coordinate coordinate0 = new Coordinate(206.22, (-2667.3));
      Aluguer aluguer0 = new Aluguer("", "Custo da Viagem: ", mockGregorianCalendar0, mockGregorianCalendar0, (-275.718), 31, 31, coordinate0, 2564.86699686584, true, false, false, false, 31);
      aluguer0.getDestino();
      assertEquals(2564.86699686584, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getAceite());
      assertEquals(31, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getListaEspera());
      assertEquals((-275.718), aluguer0.getCustoViagem(), 0.01);
      assertEquals("Custo da Viagem: ", aluguer0.getMatricula());
      assertEquals(31, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(31, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, 0, 1, (-2391));
      Coordinate coordinate0 = new Coordinate((-443.0), 1);
      Aluguer aluguer0 = new Aluguer("*****    ALUGUER    *****\n", "*****    ALUGUER    *****\n", mockGregorianCalendar0, mockGregorianCalendar0, (-2391), 0, 0, coordinate0, 2.0, true, true, false, false, 1);
      aluguer0.getDestino();
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAlteraPreco());
      assertTrue(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(1, aluguer0.getEstadoClassificacao());
      assertEquals(2.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals((-2391.0), aluguer0.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.getDataInicio();
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2334, 2146607142, 2334);
      mockGregorianCalendar0.setFirstDayOfWeek((-1110));
      Coordinate coordinate0 = new Coordinate(2146607142, (-879.6044413));
      Aluguer aluguer0 = new Aluguer("", "", mockGregorianCalendar0, mockGregorianCalendar0, 40075.016685578485, 2334, 2146607142, coordinate0, (-5446.0), true, false, false, false, 2334);
      aluguer0.getDataInicio();
      assertFalse(aluguer0.getRealizado());
      assertEquals((-5446.0), aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(2146607142, aluguer0.getTempoViagem());
      assertEquals(2334, aluguer0.getEstadoClassificacao());
      assertEquals(40075.016685578485, aluguer0.getCustoViagem(), 0.01);
      assertTrue(aluguer0.getAceite());
      assertEquals(2334, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-2195), 3039.93);
      Aluguer aluguer0 = new Aluguer("`@F!\rnwI^#Ry#v<K$", (String) null, (GregorianCalendar) null, (GregorianCalendar) null, (-2999.5031024), 628, (-2195), coordinate0, 2.0, true, false, true, true, 628);
      aluguer0.getDataFim();
      assertEquals(628, aluguer0.getEstadoClassificacao());
      assertEquals(628, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getListaEspera());
      assertTrue(aluguer0.getRealizado());
      assertEquals((-2999.5031024), aluguer0.getCustoViagem(), 0.01);
      assertEquals(2.0, aluguer0.getDistancia(), 0.01);
      assertEquals((-2195), aluguer0.getTempoViagem());
      assertTrue(aluguer0.getAceite());
      assertTrue(aluguer0.getAlteraPreco());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2334, 2146607142, 2334);
      mockGregorianCalendar0.setFirstDayOfWeek((-1110));
      Coordinate coordinate0 = new Coordinate(2146607142, (-879.6044413));
      Aluguer aluguer0 = new Aluguer("", "", mockGregorianCalendar0, mockGregorianCalendar0, 40075.016685578485, 2334, 2146607142, coordinate0, (-5446.0), true, false, false, false, 2334);
      aluguer0.getDataFim();
      assertFalse(aluguer0.getRealizado());
      assertTrue(aluguer0.getAceite());
      assertEquals(2334, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertEquals((-5446.0), aluguer0.getDistancia(), 0.01);
      assertEquals(2334, aluguer0.getEstadoClassificacao());
      assertEquals(2146607142, aluguer0.getTempoViagem());
      assertEquals(40075.016685578485, aluguer0.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      double double0 = aluguer0.getCustoViagem();
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-1364), 2896);
      Coordinate coordinate0 = new Coordinate((-1364), 1746);
      Aluguer aluguer0 = new Aluguer((String) null, (String) null, mockGregorianCalendar0, mockGregorianCalendar0, 2896, (-1364), 1746, coordinate0, (-1364), true, true, true, false, 0);
      assertFalse(aluguer0.getAlteraPreco());
      
      aluguer0.setAlteraPreco(true);
      boolean boolean0 = aluguer0.getAlteraPreco();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      boolean boolean0 = aluguer0.getAceite();
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(boolean0);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setEstadoClassificacao((-5446));
      aluguer0.clone();
      assertEquals((-5446), aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3034, 3034, 3034);
      Coordinate coordinate0 = new Coordinate(2293.1763194751, 1313.8);
      Aluguer aluguer0 = new Aluguer((String) null, "", mockGregorianCalendar0, mockGregorianCalendar0, 2293.1763194751, 3034, 0, coordinate0, 1966.690143531, false, false, true, true, 3034);
      Aluguer aluguer1 = aluguer0.clone();
      assertFalse(aluguer1.getListaEspera());
      assertEquals(3034, aluguer0.getTempoAteVeiculo());
      assertEquals(1966.690143531, aluguer1.getDistancia(), 0.01);
      assertTrue(aluguer1.getAlteraPreco());
      assertEquals(3034, aluguer1.getEstadoClassificacao());
      assertEquals(3034, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer1.getRealizado());
      assertFalse(aluguer1.getAceite());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(2293.1763194751, aluguer0.getCustoViagem(), 0.01);
      assertNotSame(aluguer1, aluguer0);
      assertEquals(1966.690143531, aluguer0.getDistancia(), 0.01);
      assertEquals(2293.1763194751, aluguer1.getCustoViagem(), 0.01);
      assertEquals(3034, aluguer1.getTempoAteVeiculo());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1807.725204681981, 0.0);
      Aluguer aluguer0 = new Aluguer("Tempo total da viagem: ", "Tempo total da viagem: ", (GregorianCalendar) null, (GregorianCalendar) null, 1807.725204681981, (-1268), (-1268), coordinate0, (-908.0), false, false, true, true, 31);
      Aluguer aluguer1 = aluguer0.clone();
      assertEquals((-1268), aluguer1.getTempoViagem());
      assertEquals(1807.725204681981, aluguer0.getCustoViagem(), 0.01);
      assertEquals((-908.0), aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getAceite());
      assertEquals(31, aluguer1.getEstadoClassificacao());
      assertTrue(aluguer1.getRealizado());
      assertNotSame(aluguer1, aluguer0);
      assertFalse(aluguer1.getListaEspera());
      assertEquals((-1268), aluguer1.getTempoAteVeiculo());
      assertTrue(aluguer1.getAlteraPreco());
      assertEquals((-908.0), aluguer0.getDistancia(), 0.01);
      assertEquals(1807.725204681981, aluguer1.getCustoViagem(), 0.01);
      assertEquals((-1268), aluguer0.getTempoAteVeiculo());
      assertEquals(31, aluguer0.getEstadoClassificacao());
      assertEquals((-1268), aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer("Aluguer Aceite pelo Propriet\u00E1rio: ", "Aluguer Aceite pelo Propriet\u00E1rio: ", (GregorianCalendar) null, (GregorianCalendar) null, 0.0, 0, 2261, (Coordinate) null, 0, true, true, true, true, 2261);
      aluguer0.setCustoViagem(2261);
      aluguer0.clone();
      assertEquals(2261.0, aluguer0.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      
      aluguer0.setCustoViagem((-1.0));
      Aluguer aluguer1 = aluguer0.clone();
      assertTrue(aluguer1.equals((Object)aluguer0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3196), 0, (-1), (-3196), (-3196));
      Coordinate coordinate0 = new Coordinate(1044, (-1298.83365));
      Aluguer aluguer0 = new Aluguer("\n", (String) null, mockGregorianCalendar0, mockGregorianCalendar0, (-1), 1044, 0, coordinate0, (-1555.0146), true, true, true, true, 1044);
      Aluguer aluguer1 = new Aluguer(aluguer0);
      // Undeclared exception!
      try { 
        aluguer1.equals(aluguer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Aluguer aluguer0 = null;
      try {
        aluguer0 = new Aluguer((Aluguer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("carros.Aluguer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer("Aluguer Aceite pelo Propriet\u00E1rio: ", "Aluguer Aceite pelo Propriet\u00E1rio: ", (GregorianCalendar) null, (GregorianCalendar) null, 0.0, 0, 2261, (Coordinate) null, 0, true, true, true, true, 2261);
      aluguer0.getDataInicio();
      assertTrue(aluguer0.getListaEspera());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(2261, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(2261, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getRealizado());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer((String) null, "", (GregorianCalendar) null, (GregorianCalendar) null, (-1998.0), 260, 260, (Coordinate) null, 0.0, false, false, false, false, 260);
      double double0 = aluguer0.getCustoViagem();
      assertEquals(260, aluguer0.getEstadoClassificacao());
      assertEquals(260, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(260, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals((-1998.0), double0, 0.01);
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer((String) null, "", (GregorianCalendar) null, (GregorianCalendar) null, (-1998.0), 260, 260, (Coordinate) null, 0.0, false, false, false, false, 260);
      boolean boolean0 = aluguer0.getRealizado();
      assertEquals(260, aluguer0.getTempoViagem());
      assertEquals(260, aluguer0.getEstadoClassificacao());
      assertEquals((-1998.0), aluguer0.getCustoViagem(), 0.01);
      assertEquals(260, aluguer0.getTempoAteVeiculo());
      assertFalse(boolean0);
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.getMatricula();
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer("Aluguer Aceite pelo Propriet\u00E1rio: ", "Aluguer Aceite pelo Propriet\u00E1rio: ", (GregorianCalendar) null, (GregorianCalendar) null, 0.0, 0, 2261, (Coordinate) null, 0, true, true, true, true, 2261);
      double double0 = aluguer0.getDistancia();
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(2261, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getRealizado());
      assertTrue(aluguer0.getAceite());
      assertEquals(0.0, double0, 0.01);
      assertEquals(2261, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.getDataFim();
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      boolean boolean0 = aluguer0.getListaEspera();
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(boolean0);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer((String) null, "", (GregorianCalendar) null, (GregorianCalendar) null, (-1998.0), 260, 260, (Coordinate) null, 0.0, false, false, false, false, 260);
      int int0 = aluguer0.getTempoAteVeiculo();
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(260, int0);
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(260, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
      assertEquals((-1998.0), aluguer0.getCustoViagem(), 0.01);
      assertEquals(260, aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer((String) null, (String) null, (GregorianCalendar) null, (GregorianCalendar) null, (-1456.0), 0, 0, (Coordinate) null, (-1245.707106), true, false, false, true, 3);
      boolean boolean0 = aluguer0.getAceite();
      assertFalse(aluguer0.getListaEspera());
      assertEquals((-1245.707106), aluguer0.getDistancia(), 0.01);
      assertEquals(3, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(boolean0);
      assertTrue(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals((-1456.0), aluguer0.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      boolean boolean0 = aluguer0.getAlteraPreco();
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertFalse(boolean0);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer("Aluguer Aceite pelo Propriet\u00E1rio: ", "Aluguer Aceite pelo Propriet\u00E1rio: ", (GregorianCalendar) null, (GregorianCalendar) null, 0.0, 0, 2261, (Coordinate) null, 0, true, true, true, true, 2261);
      aluguer0.getDestino();
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getAceite());
      assertTrue(aluguer0.getRealizado());
      assertEquals(2261, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getAlteraPreco());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(2261, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer((String) null, (String) null, (GregorianCalendar) null, (GregorianCalendar) null, (-1456.0), 0, 0, (Coordinate) null, (-1245.707106), true, false, false, true, 3);
      aluguer0.getEmail();
      assertEquals(3, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals((-1245.707106), aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals((-1456.0), aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3196), 0, (-1), (-3196), (-3196));
      Coordinate coordinate0 = new Coordinate(1044, (-1298.83365));
      Aluguer aluguer0 = new Aluguer("\n", (String) null, mockGregorianCalendar0, mockGregorianCalendar0, (-1), 1044, 0, coordinate0, (-1555.0146), true, true, true, true, 1044);
      int int0 = aluguer0.getTempoViagem();
      assertEquals(1044, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getRealizado());
      assertTrue(aluguer0.getAceite());
      assertEquals((-1555.0146), aluguer0.getDistancia(), 0.01);
      assertEquals(1044, aluguer0.getTempoAteVeiculo());
      assertEquals((-1.0), aluguer0.getCustoViagem(), 0.01);
      assertTrue(aluguer0.getAlteraPreco());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      int int0 = aluguer0.getEstadoClassificacao();
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, int0);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(boolean0);
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getListaEspera());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertEquals(0, aluguer1.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer();
      aluguer1.setAlteraPreco(true);
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(boolean0);
      assertTrue(aluguer1.getAlteraPreco());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = aluguer0.clone();
      aluguer0.setRealizado(true);
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(boolean0);
      assertTrue(aluguer0.getRealizado());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.setListaEspera(true);
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(boolean0);
      assertTrue(aluguer1.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = aluguer0.clone();
      aluguer0.setAceite(true);
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertTrue(aluguer0.getAceite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setCustoViagem(966.308590920287);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate(874, 1134.3241);
      Aluguer aluguer1 = new Aluguer("", "", mockGregorianCalendar0, mockGregorianCalendar0, 966.308590920287, 1, 874, coordinate0, 0.0, false, false, false, false, (-27));
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertEquals(966.308590920287, aluguer0.getCustoViagem(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = aluguer0.clone();
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      
      aluguer1.setCustoViagem(1.0);
      boolean boolean0 = aluguer1.equals(aluguer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      System.setCurrentTimeMillis((-1583L));
      Aluguer aluguer1 = new Aluguer();
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getAceite());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(boolean0);
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getRealizado());
      assertEquals(0, aluguer1.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate(874, 1134.3241);
      Aluguer aluguer1 = new Aluguer("", "RU;", mockGregorianCalendar0, mockGregorianCalendar0, 1.0, 1, 874, coordinate0, 0.0, false, true, true, false, 874);
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals("RU;", aluguer1.getMatricula());
      assertEquals(1, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertEquals(1.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer1.getListaEspera());
      assertFalse(aluguer0.getAceite());
      assertEquals(874, aluguer1.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer1.getRealizado());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(874, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getAceite());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(boolean0);
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 2);
      Coordinate coordinate0 = new Coordinate(334.8, 180.0);
      Aluguer aluguer1 = new Aluguer(",", ",", mockGregorianCalendar0, mockGregorianCalendar0, 0.0, 31, 2, coordinate0, 31, false, false, false, false, 2);
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(aluguer1.getRealizado());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAceite());
      assertFalse(boolean0);
      assertEquals(31, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(2, aluguer1.getTempoViagem());
      assertEquals(31.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(2, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      boolean boolean0 = aluguer0.equals("");
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(boolean0);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      boolean boolean0 = aluguer0.equals((Object) null);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertFalse(boolean0);
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      boolean boolean0 = aluguer0.equals(aluguer0);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertTrue(boolean0);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer((String) null, "", (GregorianCalendar) null, (GregorianCalendar) null, (-1998.0), 264, 264, (Coordinate) null, 0.0, false, false, false, false, 264);
      aluguer0.hashCode();
      assertEquals(264, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals(264, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(264, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals((-1998.0), aluguer0.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = aluguer0.clone();
      aluguer0.setEstadoClassificacao(2541);
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertEquals(2541, aluguer0.getEstadoClassificacao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertFalse(aluguer0.getListaEspera());
      
      aluguer0.setListaEspera(true);
      boolean boolean0 = aluguer0.getListaEspera();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.toString();
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      
      aluguer0.setCustoViagem(1);
      double double0 = aluguer0.getCustoViagem();
      assertEquals(1.0, double0, 0.01);
  }
}
