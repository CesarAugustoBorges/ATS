/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 16 20:05:17 GMT 2020
 */

package utilizadores;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import utilizadores.Utilizador;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setPassword((String) null);
      String string0 = utilizador0.getPassword();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("*****    UTILIZADOR    *****\n");
      Locale locale0 = Locale.PRC;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      Utilizador utilizador0 = new Utilizador("2O`3U+{pMzWNY$QW", (String) null, "*****    UTILIZADOR    *****\n", "7}{>^6lL%NYP%EyoL", "*****    UTILIZADOR    *****\n", mockGregorianCalendar0);
      String string0 = utilizador0.getPassword();
      assertEquals("7}{>^6lL%NYP%EyoL", string0);
      assertNotNull(string0);
      assertEquals("*****    UTILIZADOR    *****\n", utilizador0.getMorada());
      assertEquals("2O`3U+{pMzWNY$QW", utilizador0.getNome());
      assertEquals("*****    UTILIZADOR    *****\n", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("B-!", "B-!", "Data de Nascimento: ", "sw)", "", (GregorianCalendar) null);
      String string0 = utilizador0.getNome();
      assertEquals("Data de Nascimento: ", utilizador0.getEmail());
      assertEquals("sw)", utilizador0.getPassword());
      assertEquals("B-!", string0);
      assertEquals("B-!", utilizador0.getNIF());
      assertEquals("", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2518, 0, (-26));
      Utilizador utilizador0 = new Utilizador("", "Wi|(h9MgQB2%,", "\"", "H85e", "", mockGregorianCalendar0);
      String string0 = utilizador0.getNome();
      assertEquals("Wi|(h9MgQB2%,", utilizador0.getNIF());
      assertEquals("", string0);
      assertEquals("\"", utilizador0.getEmail());
      assertEquals("H85e", utilizador0.getPassword());
      assertEquals("", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("*****    UTILIZADOR    *****\n");
      Locale locale0 = Locale.PRC;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      Utilizador utilizador0 = new Utilizador("2O`3U+{pMzWNY$QW", (String) null, "*****    UTILIZADOR    *****\n", "7}{>^6lL%NYP%EyoL", "*****    UTILIZADOR    *****\n", mockGregorianCalendar0);
      String string0 = utilizador0.getNIF();
      assertEquals("2O`3U+{pMzWNY$QW", utilizador0.getNome());
      assertEquals("*****    UTILIZADOR    *****\n", utilizador0.getEmail());
      assertNull(string0);
      assertEquals("7}{>^6lL%NYP%EyoL", utilizador0.getPassword());
      assertEquals("*****    UTILIZADOR    *****\n", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getNIF();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setMorada((String) null);
      String string0 = utilizador0.getMorada();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("*****    UTILIZADOR    *****\n");
      Locale locale0 = Locale.PRC;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      Utilizador utilizador0 = new Utilizador("2O`3U+{pMzWNY$QW", (String) null, "*****    UTILIZADOR    *****\n", "7}{>^6lL%NYP%EyoL", "*****    UTILIZADOR    *****\n", mockGregorianCalendar0);
      String string0 = utilizador0.getMorada();
      assertEquals("7}{>^6lL%NYP%EyoL", utilizador0.getPassword());
      assertNotNull(string0);
      assertEquals("2O`3U+{pMzWNY$QW", utilizador0.getNome());
      assertEquals("*****    UTILIZADOR    *****\n", string0);
      assertEquals("*****    UTILIZADOR    *****\n", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(71, (-3714), 71, (-3714), 71, 0);
      Utilizador utilizador0 = new Utilizador((String) null, "e?w~>bf<_bPPfSfUlzv", (String) null, "", (String) null, mockGregorianCalendar0);
      String string0 = utilizador0.getEmail();
      assertEquals("", utilizador0.getPassword());
      assertNull(string0);
      assertEquals("e?w~>bf<_bPPfSfUlzv", utilizador0.getNIF());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("*****    UTILIZADOR    *****\n");
      Locale locale0 = Locale.PRC;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      Utilizador utilizador0 = new Utilizador("2O`3U+{pMzWNY$QW", (String) null, "*****    UTILIZADOR    *****\n", "7}{>^6lL%NYP%EyoL", "*****    UTILIZADOR    *****\n", mockGregorianCalendar0);
      String string0 = utilizador0.getEmail();
      assertEquals("2O`3U+{pMzWNY$QW", utilizador0.getNome());
      assertNotNull(string0);
      assertEquals("7}{>^6lL%NYP%EyoL", utilizador0.getPassword());
      assertEquals("*****    UTILIZADOR    *****\n", string0);
      assertEquals("*****    UTILIZADOR    *****\n", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("t", "t", "F6", "t", "F6", (GregorianCalendar) null);
      utilizador0.getDataNasc();
      assertEquals("t", utilizador0.getNome());
      assertEquals("t", utilizador0.getPassword());
      assertEquals("F6", utilizador0.getEmail());
      assertEquals("t", utilizador0.getNIF());
      assertEquals("F6", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, (-339), 2, (-339), 0);
      mockGregorianCalendar0.setLenient(false);
      utilizador0.setDataNasc(mockGregorianCalendar0);
      GregorianCalendar gregorianCalendar0 = utilizador0.getDataNasc();
      assertFalse(gregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-5143), (-5143), (-5143));
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      Utilizador utilizador0 = new Utilizador("HOj]'lIQ", "HOj]'lIQ", "xJ7'QBm k*tY#y8y96!", "HOj]'lIQ", "P/ @AimXQYu", mockGregorianCalendar0);
      utilizador0.getDataNasc();
      assertEquals("xJ7'QBm k*tY#y8y96!", utilizador0.getEmail());
      assertEquals("HOj]'lIQ", utilizador0.getPassword());
      assertEquals("HOj]'lIQ", utilizador0.getNome());
      assertEquals("P/ @AimXQYu", utilizador0.getMorada());
      assertEquals("HOj]'lIQ", utilizador0.getNIF());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2516), (-1), (-61), (-61), (-61), 1);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-2516));
      utilizador0.setDataNasc(mockGregorianCalendar0);
      GregorianCalendar gregorianCalendar0 = utilizador0.getDataNasc();
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Locale locale0 = Locale.CHINA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.setFirstDayOfWeek((-1));
      utilizador0.setDataNasc(mockGregorianCalendar0);
      GregorianCalendar gregorianCalendar0 = utilizador0.getDataNasc();
      assertTrue(gregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-579), 863, 863);
      mockGregorianCalendar0.setTimeZone((TimeZone) null);
      Utilizador utilizador0 = new Utilizador("", "=D<D2=/;vVom9", (String) null, "", "=D<D2=/;vVom9", mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        utilizador0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1608, 1608, 0, 0, 1608);
      Utilizador utilizador0 = new Utilizador((String) null, "", "", "", "</C]9R#?]", mockGregorianCalendar0);
      Utilizador utilizador1 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.equals(utilizador1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("utilizadores.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(71, (-3714), 71, (-3714), 71, 0);
      Utilizador utilizador0 = new Utilizador((String) null, "e?w~>bf<_bPPfSfUlzv", (String) null, "", (String) null, mockGregorianCalendar0);
      String string0 = utilizador0.getNIF();
      assertEquals("e?w~>bf<_bPPfSfUlzv", string0);
      assertEquals("", utilizador0.getPassword());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getMorada();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(71, (-3714), 71, (-3714), 71, 0);
      Utilizador utilizador0 = new Utilizador((String) null, "e?w~>bf<_bPPfSfUlzv", (String) null, "", (String) null, mockGregorianCalendar0);
      String string0 = utilizador0.getPassword();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("e?w~>bf<_bPPfSfUlzv", utilizador0.getNIF());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(71, (-3714), 71, (-3714), 71, 0);
      Utilizador utilizador0 = new Utilizador((String) null, "e?w~>bf<_bPPfSfUlzv", (String) null, "", (String) null, mockGregorianCalendar0);
      String string0 = utilizador0.getNome();
      assertEquals("", utilizador0.getPassword());
      assertNull(string0);
      assertEquals("e?w~>bf<_bPPfSfUlzv", utilizador0.getNIF());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getEmail();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = utilizador0.clone();
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2676, 2676, 3452, (-3129), (-3129));
      utilizador1.setDataNasc(mockGregorianCalendar0);
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      utilizador1.setMorada("R");
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = utilizador0.clone();
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      utilizador0.setPassword("t");
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      utilizador0.setEmail("c");
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = utilizador0.clone();
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      utilizador1.setNIF(">Q|");
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals(utilizador0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("t", "t", "F6", "t", "F6", (GregorianCalendar) null);
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals("t", utilizador1.getNome());
      
      utilizador1.setNome("(q");
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-579), 863, 863);
      Utilizador utilizador0 = new Utilizador("", "=D<D2=/;vVom9", (String) null, "", "=D<D2=/;vVom9", mockGregorianCalendar0);
      assertEquals("", utilizador0.getPassword());
      
      utilizador0.setPassword((String) null);
      utilizador0.hashCode();
      assertEquals("=D<D2=/;vVom9", utilizador0.getMorada());
      assertEquals("=D<D2=/;vVom9", utilizador0.getNIF());
      assertEquals("", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNome((String) null);
      utilizador0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("t", "t", "F6", "t", "F6", (GregorianCalendar) null);
      utilizador0.hashCode();
      assertEquals("F6", utilizador0.getEmail());
      assertEquals("t", utilizador0.getNIF());
      assertEquals("F6", utilizador0.getMorada());
      assertEquals("t", utilizador0.getPassword());
      assertEquals("t", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("t", "t", "F6", "t", "F6", (GregorianCalendar) null);
      String string0 = utilizador0.toString();
      assertEquals("*****    UTILIZADOR    *****\nNome: t\nNIF: t\nEmail: F6\nPassword: t\nMorada: F6\nData de Nascimento: 14/1/2014\n", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = utilizador0.clone();
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertTrue(boolean0);
      assertNotSame(utilizador1, utilizador0);
  }
}
