/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 16 20:30:10 GMT 2020
 */

package utilizadores;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import carros.Coordinate;
import java.util.GregorianCalendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import utilizadores.Cliente;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cliente_ESTest extends Cliente_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente(cliente0);
      cliente1.setNKM(1969L);
      boolean boolean0 = cliente1.equals(cliente0);
      assertEquals(1969.0, cliente1.getNKm(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente(cliente0);
      cliente0.setClassificacao((-2119));
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals((-2119), cliente0.getClassificacao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-659), 3467, 0);
      Coordinate coordinate0 = new Coordinate(3467, 3467);
      Cliente cliente0 = new Cliente("utilizadores.Cliente", "Posi\u00E7\u00E3o em que o cliente se encontra: ", "utilizadores.Cliente", "utilizadores.Cliente", "kK", mockGregorianCalendar0, coordinate0, (-1621), (-1621), 1510.25831596);
      cliente0.getPosicao();
      assertEquals((-1621), cliente0.getNAlugueres());
      assertEquals((-1621), cliente0.getClassificacao());
      assertEquals(1510.25831596, cliente0.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      double double0 = cliente0.getNKm();
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNKM(234.341);
      double double0 = cliente0.getNKm();
      assertEquals(234.341, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Cliente cliente0 = new Cliente("\n", "2s1v{{NFk{.gVZ", "\n", "", "\n", (GregorianCalendar) null, coordinate0, 1067, (-902), (-902));
      int int0 = cliente0.getNAlugueres();
      assertEquals(1067, cliente0.getClassificacao());
      assertEquals((-902.0), cliente0.getNKm(), 0.01);
      assertEquals((-902), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 31, (-2765));
      Coordinate coordinate0 = new Coordinate(31, (-2765));
      Cliente cliente0 = new Cliente("f`o5Y!MXSr>FCJ.", "Q", "Q", "j", "Q", mockGregorianCalendar0, coordinate0, 31, 31, 0);
      int int0 = cliente0.getClassificacao();
      assertEquals(31, int0);
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(31, cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setClassificacao((-1237));
      int int0 = cliente0.getClassificacao();
      assertEquals((-1237), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNKM(1606.449225816272);
      cliente0.clone();
      assertEquals(1606.449225816272, cliente0.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 31, (-2765));
      Coordinate coordinate0 = new Coordinate(31, (-2765));
      Cliente cliente0 = new Cliente("f`o5Y!MXSr>FCJ.", "Q", "Q", "j", "Q", mockGregorianCalendar0, coordinate0, 31, 31, 0);
      Cliente cliente1 = cliente0.clone();
      assertEquals(31, cliente1.getClassificacao());
      assertEquals(31, cliente0.getClassificacao());
      assertEquals(31, cliente0.getNAlugueres());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(31, cliente1.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate(1385.73707232449, 929.0);
      Cliente cliente0 = new Cliente("97|A%km", "97|A%km", "YZD", "97|A%km", (String) null, mockGregorianCalendar0, coordinate0, (-1), (-1), (-1));
      Cliente cliente1 = cliente0.clone();
      assertEquals((-1), cliente1.getNAlugueres());
      assertEquals((-1), cliente0.getNAlugueres());
      assertEquals((-1.0), cliente0.getNKm(), 0.01);
      assertEquals((-1.0), cliente1.getNKm(), 0.01);
      assertEquals((-1), cliente1.getClassificacao());
      assertEquals((-1), cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setPosicao((Coordinate) null);
      // Undeclared exception!
      try { 
        cliente0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("utilizadores.Cliente", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setPosicao((Coordinate) null);
      // Undeclared exception!
      try { 
        cliente0.getPosicao();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("utilizadores.Cliente", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNIF((String) null);
      Cliente cliente1 = new Cliente(cliente0);
      // Undeclared exception!
      try { 
        cliente1.equals(cliente0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("utilizadores.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setPosicao((Coordinate) null);
      // Undeclared exception!
      try { 
        cliente0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("utilizadores.Cliente", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Cliente cliente0 = null;
      try {
        cliente0 = new Cliente((Cliente) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("utilizadores.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Coordinate coordinate0 = cliente0.getPosicao();
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      int int0 = cliente0.getNAlugueres();
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0, int0);
      assertEquals(0.0, cliente0.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4347), (-4347), (-4347));
      Coordinate coordinate0 = new Coordinate((-4347), 1285.2200281012058);
      Cliente cliente0 = new Cliente("LD^}x>\"`r%N", "", "lmITx?Pd~", "Stk)M#:BHD$,8", (String) null, mockGregorianCalendar0, coordinate0, (-4347), (-4347), (-4347));
      double double0 = cliente0.getNKm();
      assertEquals((-4347), cliente0.getClassificacao());
      assertEquals((-4347), cliente0.getNAlugueres());
      assertEquals((-4347.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      int int0 = cliente0.getClassificacao();
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente(cliente0);
      cliente1.setNKM(1969L);
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals(1969.0, cliente1.getNKm(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente(cliente0);
      cliente0.setNAlugueres(612);
      boolean boolean0 = cliente1.equals(cliente0);
      assertEquals(612, cliente0.getNAlugueres());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente(cliente0);
      cliente1.setClassificacao((-2119));
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals((-2119), cliente1.getClassificacao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate(0, 2.0);
      Cliente cliente1 = new Cliente("", "", "", "", "Password: ", mockGregorianCalendar0, coordinate0, (-420), 0, (-420));
      boolean boolean0 = cliente0.equals(cliente1);
      assertFalse(boolean0);
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0, cliente1.getNAlugueres());
      assertEquals((-420.0), cliente1.getNKm(), 0.01);
      assertEquals((-420), cliente1.getClassificacao());
      assertEquals(0, cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      boolean boolean0 = cliente0.equals("");
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getNAlugueres());
      assertFalse(boolean0);
      assertEquals(0, cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      boolean boolean0 = cliente0.equals((Object) null);
      assertEquals(0, cliente0.getNAlugueres());
      assertFalse(boolean0);
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      boolean boolean0 = cliente0.equals(cliente0);
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertTrue(boolean0);
      assertEquals(0, cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Coordinate coordinate0 = new Coordinate((-232.0), (-232.0));
      Cliente cliente1 = new Cliente(cliente0);
      assertTrue(cliente1.equals((Object)cliente0));
      
      cliente0.setPosicao(coordinate0);
      boolean boolean0 = cliente0.equals(cliente1);
      assertFalse(cliente1.equals((Object)cliente0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setPosicao((Coordinate) null);
      cliente0.hashCode();
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.hashCode();
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0, cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = cliente0.clone();
      cliente1.setNAlugueres((-2765));
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals((-2765), cliente1.getNAlugueres());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNAlugueres(3);
      int int0 = cliente0.getNAlugueres();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Coordinate coordinate0 = new Coordinate((-232.0), (-232.0));
      cliente0.setPosicao(coordinate0);
      cliente0.getPosicao();
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0, cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      String string0 = cliente0.toString();
      assertEquals("*****    UTILIZADOR    *****\nNome: \nNIF: \nEmail: \nPassword: \nMorada: \nData de Nascimento: 14/1/2014\nPosi\u00E7\u00E3o em que o cliente se encontra: 0, 0\nClassifica\u00E7\u00E3o do cliente: 0\nN\u00FAmero de alugueres efetuados: 0\nN\u00FAmero de Km percorridos: 0.0\n", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente(cliente0);
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals(0, cliente1.getClassificacao());
      assertEquals(0, cliente1.getNAlugueres());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertTrue(boolean0);
  }
}
